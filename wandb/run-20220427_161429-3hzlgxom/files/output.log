RoboVisV1(
  (w): Conv1d(8, 8, kernel_size=(3,), stride=(1,), padding=same)
  (w1): Conv1d(2, 8, kernel_size=(3,), stride=(1,), padding=same)
  (a1): Sequential(
    (0): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (w2): Sequential(
    (0): Conv1d(8, 8, kernel_size=(3,), stride=(1,), padding=same)
    (1): ReLU(inplace=True)
    (2): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
)
torch.Size([1, 8, 64])
RoboVisV1(
  (w): Conv1d(8, 8, kernel_size=(3,), stride=(1,), padding=same)
  (w1): Conv1d(2, 8, kernel_size=(3,), stride=(1,), padding=same)
  (a1): Sequential(
    (0): ReLU(inplace=True)
    (1): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (w2): Sequential(
    (0): Conv1d(8, 8, kernel_size=(3,), stride=(1,), padding=same)
    (1): ReLU(inplace=True)
    (2): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
)
self.h torch.Size([1, 8, 256])
self.A torch.Size([1, 8, 256])
self.h torch.Size([1, 8, 128])
RoboVisV1(
  (w): Conv1d(8, 8, kernel_size=(3,), stride=(1,), padding=same)
  (w1): Conv1d(2, 8, kernel_size=(3,), stride=(1,), padding=same)
  (a1): Sequential(
    (0): ReLU(inplace=True)
  )
  (w2): Sequential(
    (0): Conv1d(8, 8, kernel_size=(3,), stride=(1,), padding=same)
    (1): ReLU(inplace=True)
    (2): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
)
self.h torch.Size([1, 8, 256])
self.A torch.Size([1, 8, 256])
self.h torch.Size([1, 8, 256])
torch.Size([1, 8, 64])
self.h torch.Size([1, 8, 256])
self.A torch.Size([1, 8, 256])
self.h torch.Size([1, 8, 256])
torch.Size([1, 8, 64])
RoboVisV1(
  (w): Conv1d(8, 8, kernel_size=(3,), stride=(1,), padding=same)
  (w1): Conv1d(2, 8, kernel_size=(3,), stride=(1,), padding=same)
  (a1): Sequential(
    (0): ReLU(inplace=True)
  )
  (w2): Sequential(
    (0): Conv1d(8, 8, kernel_size=(3,), stride=(1,), padding=same)
    (1): ReLU(inplace=True)
    (2): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
)
self.h torch.Size([1, 8, 256])
self.A torch.Size([1, 8, 256])
self.h torch.Size([1, 8, 256])
torch.Size([1, 8, 64])
self.h torch.Size([1, 8, 256])
self.A torch.Size([1, 8, 256])
self.h torch.Size([1, 8, 256])
torch.Size([1, 8, 64])
RoboVisV1(
  (w): Conv1d(8, 8, kernel_size=(3,), stride=(1,), padding=same)
  (w1): Conv1d(2, 8, kernel_size=(3,), stride=(1,), padding=same)
  (a1): Sequential(
    (0): ReLU(inplace=True)
  )
  (w2): Sequential(
    (0): Conv1d(8, 8, kernel_size=(3,), stride=(1,), padding=same)
    (1): ReLU(inplace=True)
    (2): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
)
self.h torch.Size([1, 8, 256])
self.A torch.Size([1, 8, 256])
self.h torch.Size([1, 8, 256])
torch.Size([1, 8, 64])
self.h torch.Size([1, 8, 256])
self.A torch.Size([1, 8, 256])
self.h torch.Size([1, 8, 256])
torch.Size([1, 8, 64])
RoboVisV1(
  (w): Conv1d(8, 8, kernel_size=(3,), stride=(1,), padding=same)
  (w1): Conv1d(2, 8, kernel_size=(3,), stride=(1,), padding=same)
  (a1): Sequential(
    (0): ReLU(inplace=True)
  )
  (w2): Sequential(
    (0): Conv1d(8, 8, kernel_size=(3,), stride=(1,), padding=same)
    (1): ReLU(inplace=True)
    (2): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
)
self.h torch.Size([1, 8, 256])
self.A torch.Size([1, 8, 256])
self.h torch.Size([1, 8, 256])
torch.Size([1, 8, 64])
self.h torch.Size([1, 8, 256])
self.A torch.Size([1, 8, 256])
self.h torch.Size([1, 8, 256])
torch.Size([1, 8, 64])